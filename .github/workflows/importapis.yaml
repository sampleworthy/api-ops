name: Import APIs to APIM

on:
  push:
    branches: [ main ]
    paths:
      - 'apis/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'apis/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  validate-apis:
    runs-on: ubuntu-latest
    name: Validate APIs
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
          npm install -g @stoplight/spectral-cli
      
      - name: Create validator script
        run: |
          # Copy the validator script content from repository
          cp api-validator.py validator.py
          chmod +x validator.py
      
      - name: Validate all API specs
        id: validate
        run: |
          python validator.py --all
          if [ $? -ne 0 ]; then
            echo "::error::API validation failed. Please fix the issues before importing to APIM."
            exit 1
          fi
  
  import-apis:
    needs: validate-apis
    runs-on: ubuntu-latest
    name: Import APIs
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Install yq
        run: |
          sudo add-apt-repository ppa:rmescandon/yq -y
          sudo apt update
          sudo apt install yq -y
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Import APIs
        run: |
          for file in ./apis/*.yaml; do
            baseName=$(basename "$file" .yaml)
            serviceUrl=$(yq e '.servers[0].url' $file)
            versionId=$(yq e '.info.version' $file)
            displayName="$baseName-$versionId"
            
            echo "Importing $baseName version $versionId"
            
            # Try import with retry logic
            MAX_RETRIES=3
            RETRY_COUNT=0
            SUCCESS=false
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
              echo "Attempt $((RETRY_COUNT+1)) of $MAX_RETRIES"
              
              az apim api import \
                --resource-group ${{ secrets.RESOURCE_GROUP }} \
                --service-name ${{ secrets.APIM_INSTANCE }} \
                --path $baseName \
                --api-type http \
                --api-id $baseName \
                --display-name $displayName \
                --service-url $serviceUrl \
                --protocols https \
                --specification-format OpenApi \
                --specification-path $file
                
              if [ $? -eq 0 ]; then
                SUCCESS=true
                echo "Successfully imported $baseName"
              else
                RETRY_COUNT=$((RETRY_COUNT+1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Import failed, retrying in 10 seconds..."
                  sleep 10
                else
                  echo "Failed to import $baseName after $MAX_RETRIES attempts"
                  # Continue to next API instead of failing the whole workflow
                  break
                fi
              fi
            done
            
            if [ "$SUCCESS" = true ]; then
              # Set API version using the Azure API
              accessToken=$(az account get-access-token --query accessToken -o tsv)
              subscriptionId=$(az account show --query id -o tsv)
              apiId=$(az apim api list --resource-group ${{ secrets.RESOURCE_GROUP }} --service-name ${{ secrets.APIM_INSTANCE }} --query "[?name=='$baseName'].apiId" -o tsv)
              
              curl -X PATCH -H "Authorization: Bearer $accessToken" \
                -H "Content-Type: application/json" \
                -d "{ \"properties\": { \"apiVersion\": \"$versionId\" } }" \
                "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/${{ secrets.RESOURCE_GROUP }}/providers/Microsoft.ApiManagement/service/${{ secrets.APIM_INSTANCE }}/apis/$apiId?api-version=2019-01-01"
            fi
          done
      
      - name: Create version sets if needed
        run: |
          python apiazure.py
