name: Import APIs to APIM

on:
  push:
    branches: [ main ]
    paths:
      - 'apis/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'apis/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  validate-apis:
    runs-on: ubuntu-latest
    name: Validate APIs
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
          npm install -g @stoplight/spectral-cli
      
      - name: Create validator script
        run: |
          cat > api-validator.py << 'EOF'
          #!/usr/bin/env python3
          import sys
          import os
          import json
          import yaml
          import logging
          import re
          from pathlib import Path
          
          logging.basicConfig(level=logging.INFO, 
                              format='%(asctime)s - %(levelname)s - %(message)s')
          logger = logging.getLogger('api-validator')
          
          class ApiValidator:
              def __init__(self, spec_path):
                  self.spec_path = spec_path
                  self.errors = []
                  self.warnings = []
                  
                  # Load the specification
                  try:
                      with open(spec_path, 'r') as f:
                          content = f.read()
                          if spec_path.endswith('.json'):
                              self.spec = json.loads(content)
                          else:  # Assume YAML
                              self.spec = yaml.safe_load(content)
                  except Exception as e:
                      self.errors.append(f"Failed to load specification: {str(e)}")
                      self.spec = None
              
              def validate(self):
                  """Run all validation checks"""
                  if not self.spec:
                      return False
                  
                  # Core validation checks
                  self.check_operation_ids()
                  self.check_path_parameters()
                  self.check_security_definitions()
                  self.check_content_types()
                  self.check_servers()
                  self.check_response_definitions()
                  
                  return len(self.errors) == 0
              
              def check_operation_ids(self):
                  """Verify all operations have unique operationIds"""
                  if not self.spec.get('paths'):
                      self.errors.append("No paths defined in specification")
                      return
                  
                  operation_ids = {}
                  
                  for path, path_item in self.spec['paths'].items():
                      for method in ['get', 'post', 'put', 'delete', 'patch']:
                          if method not in path_item:
                              continue
                              
                          operation = path_item[method]
                          if 'operationId' not in operation:
                              self.errors.append(f"Missing operationId in {method.upper()} {path}")
                          else:
                              op_id = operation['operationId']
                              if op_id in operation_ids:
                                  self.errors.append(f"Duplicate operationId '{op_id}' found in {method.upper()} {path} and {operation_ids[op_id]}")
                              else:
                                  operation_ids[op_id] = f"{method.upper()} {path}"
              
              def check_path_parameters(self):
                  """Verify path parameters are properly defined"""
                  if not self.spec.get('paths'):
                      return
                      
                  for path, path_item in self.spec['paths'].items():
                      # Find parameters in path template
                      path_params = re.findall(r'{([^}]+)}', path)
                      
                      for method in ['get', 'post', 'put', 'delete', 'patch']:
                          if method not in path_item:
                              continue
                          
                          operation = path_item[method]
                          operation_params = []
                          
                          # Check operation parameters
                          if 'parameters' in operation:
                              for param in operation.get('parameters', []):
                                  if param.get('in') == 'path':
                                      operation_params.append(param.get('name'))
                                      
                                      # Ensure required=true for path parameters
                                      if not param.get('required'):
                                          self.errors.append(f"Path parameter '{param.get('name')}' in {method.upper()} {path} must have required=true")
                          
                          # Check path item parameters
                          if 'parameters' in path_item:
                              for param in path_item.get('parameters', []):
                                  if param.get('in') == 'path' and param.get('name') not in operation_params:
                                      operation_params.append(param.get('name'))
                          
                          # Verify all path template parameters are defined
                          for param_name in path_params:
                              if param_name not in operation_params:
                                  self.errors.append(f"Path parameter '{{{param_name}}}' in {path} is not defined in {method.upper()} operation")
              
              def check_security_definitions(self):
                  """Check security definitions for potential APIM issues"""
                  if not self.spec.get('components') or not self.spec['components'].get('securitySchemes'):
                      return
                      
                  for name, scheme in self.spec['components']['securitySchemes'].items():
                      # Check for empty or none type
                      if not scheme.get('type'):
                          self.errors.append(f"Security scheme '{name}' is missing a type")
                      
                      # Schemas with no "type" will fail
                      if scheme.get('type', '') == '':
                          self.errors.append(f"Security scheme '{name}' has empty type property")
              
              def check_content_types(self):
                  """Check for potentially problematic content types"""
                  supported_types = [
                      'application/json', 
                      'application/xml', 
                      'text/plain', 
                      'multipart/form-data', 
                      'application/x-www-form-urlencoded'
                  ]
                  
                  if not self.spec.get('paths'):
                      return
                      
                  for path, path_item in self.spec['paths'].items():
                      for method in ['get', 'post', 'put', 'delete', 'patch']:
                          if method not in path_item:
                              continue
                              
                          operation = path_item[method]
                          
                          # Check request body content types
                          if 'requestBody' in operation and 'content' in operation['requestBody']:
                              for content_type in operation['requestBody']['content'].keys():
                                  if content_type not in supported_types:
                                      self.warnings.append(f"Content type '{content_type}' in {method.upper()} {path} request body may not be well supported in APIM")
                          
                          # Check response content types
                          if 'responses' in operation:
                              for status, response in operation['responses'].items():
                                  if 'content' in response:
                                      for content_type in response['content'].keys():
                                          if content_type not in supported_types:
                                              self.warnings.append(f"Content type '{content_type}' in {method.upper()} {path} response may not be well supported in APIM")
              
              def check_servers(self):
                  """Check for server information"""
                  # For OpenAPI 3.0
                  if self.spec.get('openapi', '').startswith('3.') and not self.spec.get('servers'):
                      self.warnings.append("No servers defined in OpenAPI 3.0 specification")
                      
                  # For OpenAPI 2.0 (Swagger)
                  if self.spec.get('swagger', '').startswith('2.') and not (self.spec.get('host') or self.spec.get('basePath')):
                      self.warnings.append("No host or basePath defined in Swagger 2.0 specification")
              
              def check_response_definitions(self):
                  """Check that operations have at least one success response"""
                  if not self.spec.get('paths'):
                      return
                      
                  for path, path_item in self.spec['paths'].items():
                      for method in ['get', 'post', 'put', 'delete', 'patch']:
                          if method not in path_item:
                              continue
                              
                          operation = path_item[method]
                          
                          if 'responses' not in operation:
                              self.errors.append(f"No responses defined for {method.upper()} {path}")
                              continue
                              
                          has_success = False
                          for status in operation['responses'].keys():
                              if status.startswith('2') or status.startswith('3'):
                                  has_success = True
                                  
                                  # Check for empty response definition
                                  response = operation['responses'][status]
                                  if not response or (isinstance(response, dict) and not response.get('description')):
                                      self.errors.append(f"Empty success response definition for {method.upper()} {path} with status {status}")
                                  
                          if not has_success:
                              self.errors.append(f"No success response (2xx, 3xx) defined for {method.upper()} {path}")
              
              def report(self):
                  """Generate a validation report"""
                  if not self.errors and not self.warnings:
                      logger.info(f"✅ {self.spec_path} passed all validation checks")
                      return True
                      
                  if self.errors:
                      logger.error(f"❌ {self.spec_path} failed validation with {len(self.errors)} errors:")
                      for i, error in enumerate(self.errors, 1):
                          logger.error(f"  {i}. {error}")
                          
                  if self.warnings:
                      logger.warning(f"⚠️ {self.spec_path} has {len(self.warnings)} warnings:")
                      for i, warning in enumerate(self.warnings, 1):
                          logger.warning(f"  {i}. {warning}")
                          
                  return len(self.errors) == 0
          
          
          def main():
              if len(sys.argv) < 2:
                  print("Usage: python api-validator.py <path-to-spec> [--all]")
                  return 1
              
              # Check if we need to validate all specs
              if sys.argv[1] == '--all':
                  specs = []
                  for ext in ['.yaml', '.yml', '.json']:
                      specs.extend(list(Path('./apis').glob(f'*{ext}')))
              else:
                  specs = [Path(sys.argv[1])]
              
              # Validate each spec
              all_valid = True
              for spec_path in specs:
                  validator = ApiValidator(str(spec_path))
                  
                  # Run validation
                  is_valid = validator.validate()
                  
                  # Show report
                  spec_valid = validator.report()
                  all_valid = all_valid and spec_valid
              
              return 0 if all_valid else 1
          
          
          if __name__ == "__main__":
              sys.exit(main())
          EOF
          
          chmod +x api-validator.py
      
      - name: Validate all API specs
        id: validate
        run: |
          python api-validator.py --all
          if [ $? -ne 0 ]; then
            echo "API validation failed, but continuing with import process..."
          fi
  
  import-apis:
    needs: validate-apis
    runs-on: ubuntu-latest
    name: Import APIs

    steps:
      - uses: actions/checkout@v2

      - name: Install yq
        run: |
         sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
         sudo chmod +x /usr/local/bin/yq

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Import APIs
        run: |
          for file in ./apis/*.yaml; do
            baseName=$(basename "$file" .yaml)
            serviceUrl=$(yq e '.servers[0].url' $file)
            versionId=$(yq e '.info.version' $file)
            displayName="$baseName-$versionId"
            
            echo "Importing $baseName version $versionId"
            
            # Try import with retry logic
            MAX_RETRIES=3
            RETRY_COUNT=0
            SUCCESS=false
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
              echo "Attempt $((RETRY_COUNT+1)) of $MAX_RETRIES"
              
              az apim api import \
                --resource-group ${{ secrets.RESOURCE_GROUP }} \
                --service-name ${{ secrets.APIM_INSTANCE }} \
                --path $baseName \
                --api-type http \
                --api-id $baseName \
                --display-name $displayName \
                --service-url $serviceUrl \
                --protocols https \
                --specification-format OpenApi \
                --specification-path $file
                
              if [ $? -eq 0 ]; then
                SUCCESS=true
                echo "Successfully imported $baseName"
              else
                RETRY_COUNT=$((RETRY_COUNT+1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Import failed, retrying in 10 seconds..."
                  sleep 10
                else
                  echo "Failed to import $baseName after $MAX_RETRIES attempts"
                  # Continue to next API instead of failing the whole workflow
                  break
                fi
              fi
            done
            
            if [ "$SUCCESS" = true ]; then
              # Set API version using the Azure API
              accessToken=$(az account get-access-token --query accessToken -o tsv)
              subscriptionId=$(az account show --query id -o tsv)
              apiId=$(az apim api list --resource-group ${{ secrets.RESOURCE_GROUP }} --service-name ${{ secrets.APIM_INSTANCE }} --query "[?name=='$baseName'].apiId" -o tsv)
              
              curl -X PATCH -H "Authorization: Bearer $accessToken" \
                -H "Content-Type: application/json" \
                -d "{ \"properties\": { \"apiVersion\": \"$versionId\" } }" \
                "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/${{ secrets.RESOURCE_GROUP }}/providers/Microsoft.ApiManagement/service/${{ secrets.APIM_INSTANCE }}/apis/$apiId?api-version=2019-01-01"
            fi
          done
